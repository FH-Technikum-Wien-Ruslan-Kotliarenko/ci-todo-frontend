name: Frontend CI/CD Pipeline

on:
  push:
    branches:
      - main
      - deploy/production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '18'

      # - name: Install Dependencies
      #   run: npm install
      #   # Run if pushing to main OR deploy/production
      #   if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/deploy/production')

      # - name: Lint Code
      #   run: npm run lint
      #   if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/deploy/production')

      # - name: Run Tests
      #   run: npm run test
      #   if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/deploy/production')

      # - name: SonarQube Scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #   if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/deploy/production')

      # - name: Snyk Monitor
      #   uses: snyk/actions/node@master
      #   env:
      #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #       command: monitor
      #   if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/deploy/production')

      # - name: Snyk Test
      #   uses: snyk/actions/node@master
      #   continue-on-error: true # ideally should be false, but for demo purposes we set it to true
      #   env:
      #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #       args: --severity-threshold=high
      #   if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/deploy/production')

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_PASSWORD }}
      #   # Run if pushing to main OR deploy/production
      #   if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/deploy/production')

      # - name: Build Docker Image
      #   run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/ci-todo-frontend:${{ github.sha }} .
      #   if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/deploy/production')

      # - name: Push Docker Image
      #   run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/ci-todo-frontend:${{ github.sha }}
      #   if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/deploy/production')

      # - name: Deploy to AWS EC2
      #   uses: appleboy/ssh-action@v0.1.6
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_PRIVATE_KEY }}
      #     port: 22
      #     script: |
      #       cd app
      #       sed -i '/^BACKEND_TAG=/d' .env
      #       echo "BACKEND_TAG=${{ github.sha }}" >> .env
      #       docker compose pull frontend
      #       docker compose up -d frontend
      #   # IMPORTANT: Only run on deploy/production
      #   if: startsWith(github.ref, 'refs/heads/deploy/production')

      # Uncomment this step to test failure notification
      # - name: Test Failure
      #   run: exit 1 # Force a failure for testing purposes

  notify:
    if: failure()
    needs: build-and-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Post text to a Slack channel
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            "channel": "${{ secrets.SLACK_FRONTEND_CHANNEL_ID }}",
            "text": "ðŸš¨ Backend CI pipeline failed for commit ${{ github.sha }}"
